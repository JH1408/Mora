generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Custom fields for flashcard app
  preferences Json?

  // Relations
  decks          Deck[]
  studySessions  StudySession[]
  cardProgress   CardProgress[]

  @@map("users")
}

model Language {
  id           String  @id @default(cuid())
  code         String  @unique
  name         String
  script       String?
  rtl          Boolean @default(false)
  ttsSupported Boolean @default(true) @map("tts_supported")

  // Relations
  decks Deck[]

  @@map("languages")
}

model Deck {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  languageId  String   @map("language_id")
  name        String
  description String?
  difficulty  Difficulty?
  isActive    Boolean  @default(true) @map("is_active")
  cardsCount  Int      @default(0) @map("cards_count")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  language      Language       @relation(fields: [languageId], references: [id])
  cards         Card[]
  studySessions StudySession[]

  @@map("decks")
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Card {
  id                String  @id @default(cuid())
  deckId            String  @map("deck_id")
  frontText         String  @map("front_text")
  backText          String  @map("back_text")
  phoneticSpelling  String? @map("phonetic_spelling")
  usageContext      String? @map("usage_context")
  handwritingData   Json?   @map("handwriting_data")
  tags              Json?   @default("[]")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  deck         Deck           @relation(fields: [deckId], references: [id], onDelete: Cascade)
  cardProgress CardProgress[]

  @@map("cards")
}

model StudySession {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  deckId          String    @map("deck_id")
  cardsStudied    Int       @default(0) @map("cards_studied")
  correctAnswers  Int       @default(0) @map("correct_answers")
  sessionDuration Int?      @map("session_duration")
  studyMode       String    @map("study_mode")
  startedAt       DateTime  @default(now()) @map("started_at")
  completedAt     DateTime? @map("completed_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  deck Deck @relation(fields: [deckId], references: [id], onDelete: Cascade)

  @@map("study_sessions")
}

model CardProgress {
  id                     String   @id @default(cuid())
  userId                 String   @map("user_id")
  cardId                 String   @map("card_id")
  easinessFactor         Float    @default(2.5) @map("easiness_factor")
  repetitions            Int      @default(0)
  intervalDays           Int      @default(1) @map("interval_days")
  nextReviewDate         DateTime @default(now()) @map("next_review_date")
  lastDifficultyRating   String?  @map("last_difficulty_rating")
  totalReviews           Int      @default(0) @map("total_reviews")
  correctReviews         Int      @default(0) @map("correct_reviews")
  updatedAt              DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@unique([userId, cardId])
  @@map("card_progress")
}
